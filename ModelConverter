#keras to tflite

def keras2tflite(keras_model, tflitefile)
    converter = tf.lite.TFLiteConverter.from_keras_model(model_2)
    # Indicate that we want to perform the default optimizations,
    converter.optimizations = [tf.lite.Optimize.DEFAULT]
    tflite_model = converter.convert()
    open(tflitefile, "wb").write(tflite_model)
    
    
#Pytorch to Onnx
def pytorch2onnx(model, onnxfile,cpu = True):
    device = torch.device("cpu" if cpu else "cuda")
    net = model.to(device)
    inputs = torch.randn(1, 3, WIDTH, HEIGHT).to(device)
    torch_out = torch.onnx._export(net, inputs, output_onnx, export_params=True, verbose=False)
